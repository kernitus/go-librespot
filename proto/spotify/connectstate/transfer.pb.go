// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: spotify/connectstate/transfer.proto

package connectstate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstrumentationParams struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	InteractionIds  []string               `protobuf:"bytes,6,rep,name=interaction_ids,json=interactionIds,proto3" json:"interaction_ids,omitempty"`
	PageInstanceIds []string               `protobuf:"bytes,7,rep,name=page_instance_ids,json=pageInstanceIds,proto3" json:"page_instance_ids,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *InstrumentationParams) Reset() {
	*x = InstrumentationParams{}
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentationParams) ProtoMessage() {}

func (x *InstrumentationParams) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentationParams.ProtoReflect.Descriptor instead.
func (*InstrumentationParams) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *InstrumentationParams) GetInteractionIds() []string {
	if x != nil {
		return x.InteractionIds
	}
	return nil
}

func (x *InstrumentationParams) GetPageInstanceIds() []string {
	if x != nil {
		return x.PageInstanceIds
	}
	return nil
}

type Playback struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	Timestamp                       int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PositionAsOfTimestamp           int32                  `protobuf:"varint,2,opt,name=position_as_of_timestamp,json=positionAsOfTimestamp,proto3" json:"position_as_of_timestamp,omitempty"`
	PlaybackSpeed                   float64                `protobuf:"fixed64,3,opt,name=playback_speed,json=playbackSpeed,proto3" json:"playback_speed,omitempty"`
	IsPaused                        bool                   `protobuf:"varint,4,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
	CurrentTrack                    *ContextTrack          `protobuf:"bytes,5,opt,name=current_track,json=currentTrack,proto3" json:"current_track,omitempty"`
	AssociatedCurrentTrack          *ContextTrack          `protobuf:"bytes,6,opt,name=associated_current_track,json=associatedCurrentTrack,proto3,oneof" json:"associated_current_track,omitempty"`
	AssociatedPositionAsOfTimestamp *int32                 `protobuf:"varint,7,opt,name=associated_position_as_of_timestamp,json=associatedPositionAsOfTimestamp,proto3,oneof" json:"associated_position_as_of_timestamp,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *Playback) Reset() {
	*x = Playback{}
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Playback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playback) ProtoMessage() {}

func (x *Playback) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playback.ProtoReflect.Descriptor instead.
func (*Playback) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *Playback) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Playback) GetPositionAsOfTimestamp() int32 {
	if x != nil {
		return x.PositionAsOfTimestamp
	}
	return 0
}

func (x *Playback) GetPlaybackSpeed() float64 {
	if x != nil {
		return x.PlaybackSpeed
	}
	return 0
}

func (x *Playback) GetIsPaused() bool {
	if x != nil {
		return x.IsPaused
	}
	return false
}

func (x *Playback) GetCurrentTrack() *ContextTrack {
	if x != nil {
		return x.CurrentTrack
	}
	return nil
}

func (x *Playback) GetAssociatedCurrentTrack() *ContextTrack {
	if x != nil {
		return x.AssociatedCurrentTrack
	}
	return nil
}

func (x *Playback) GetAssociatedPositionAsOfTimestamp() int32 {
	if x != nil && x.AssociatedPositionAsOfTimestamp != nil {
		return *x.AssociatedPositionAsOfTimestamp
	}
	return 0
}

type Queue struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Tracks         []*ContextTrack        `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	IsPlayingQueue bool                   `protobuf:"varint,2,opt,name=is_playing_queue,json=isPlayingQueue,proto3" json:"is_playing_queue,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Queue) Reset() {
	*x = Queue{}
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queue) ProtoMessage() {}

func (x *Queue) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queue.ProtoReflect.Descriptor instead.
func (*Queue) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *Queue) GetTracks() []*ContextTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *Queue) GetIsPlayingQueue() bool {
	if x != nil {
		return x.IsPlayingQueue
	}
	return false
}

type Session struct {
	state                 protoimpl.MessageState        `protogen:"open.v1"`
	PlayOrigin            *PlayOrigin                   `protobuf:"bytes,1,opt,name=play_origin,json=playOrigin,proto3" json:"play_origin,omitempty"`
	Context               *Context                      `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	CurrentUid            string                        `protobuf:"bytes,3,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	OptionOverrides       *ContextPlayerOptionOverrides `protobuf:"bytes,4,opt,name=option_overrides,json=optionOverrides,proto3" json:"option_overrides,omitempty"`
	Suppressions          *Suppressions                 `protobuf:"bytes,5,opt,name=suppressions,proto3" json:"suppressions,omitempty"`
	InstrumentationParams *InstrumentationParams        `protobuf:"bytes,6,opt,name=instrumentation_params,json=instrumentationParams,proto3" json:"instrumentation_params,omitempty"`
	ShuffleSeed           *string                       `protobuf:"bytes,7,opt,name=shuffle_seed,json=shuffleSeed,proto3,oneof" json:"shuffle_seed,omitempty"`
	MainContext           *Context                      `protobuf:"bytes,8,opt,name=main_context,json=mainContext,proto3,oneof" json:"main_context,omitempty"`
	OriginalSessionId     *string                       `protobuf:"bytes,9,opt,name=original_session_id,json=originalSessionId,proto3,oneof" json:"original_session_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *Session) GetPlayOrigin() *PlayOrigin {
	if x != nil {
		return x.PlayOrigin
	}
	return nil
}

func (x *Session) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Session) GetCurrentUid() string {
	if x != nil {
		return x.CurrentUid
	}
	return ""
}

func (x *Session) GetOptionOverrides() *ContextPlayerOptionOverrides {
	if x != nil {
		return x.OptionOverrides
	}
	return nil
}

func (x *Session) GetSuppressions() *Suppressions {
	if x != nil {
		return x.Suppressions
	}
	return nil
}

func (x *Session) GetInstrumentationParams() *InstrumentationParams {
	if x != nil {
		return x.InstrumentationParams
	}
	return nil
}

func (x *Session) GetShuffleSeed() string {
	if x != nil && x.ShuffleSeed != nil {
		return *x.ShuffleSeed
	}
	return ""
}

func (x *Session) GetMainContext() *Context {
	if x != nil {
		return x.MainContext
	}
	return nil
}

func (x *Session) GetOriginalSessionId() string {
	if x != nil && x.OriginalSessionId != nil {
		return *x.OriginalSessionId
	}
	return ""
}

type TransferState struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Options        *ContextPlayerOptions  `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Playback       *Playback              `protobuf:"bytes,2,opt,name=playback,proto3" json:"playback,omitempty"`
	CurrentSession *Session               `protobuf:"bytes,3,opt,name=current_session,json=currentSession,proto3" json:"current_session,omitempty"`
	Queue          *Queue                 `protobuf:"bytes,4,opt,name=queue,proto3" json:"queue,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TransferState) Reset() {
	*x = TransferState{}
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferState) ProtoMessage() {}

func (x *TransferState) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferState.ProtoReflect.Descriptor instead.
func (*TransferState) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *TransferState) GetOptions() *ContextPlayerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *TransferState) GetPlayback() *Playback {
	if x != nil {
		return x.Playback
	}
	return nil
}

func (x *TransferState) GetCurrentSession() *Session {
	if x != nil {
		return x.CurrentSession
	}
	return nil
}

func (x *TransferState) GetQueue() *Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

type ContextTrack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Uid           string                 `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid           []byte                 `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextTrack) Reset() {
	*x = ContextTrack{}
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextTrack) ProtoMessage() {}

func (x *ContextTrack) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextTrack.ProtoReflect.Descriptor instead.
func (*ContextTrack) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *ContextTrack) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ContextTrack) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ContextTrack) GetGid() []byte {
	if x != nil {
		return x.Gid
	}
	return nil
}

func (x *ContextTrack) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ContextPlayerOptionOverrides struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ShufflingContext bool                   `protobuf:"varint,1,opt,name=shuffling_context,json=shufflingContext,proto3" json:"shuffling_context,omitempty"`
	RepeatingContext bool                   `protobuf:"varint,2,opt,name=repeating_context,json=repeatingContext,proto3" json:"repeating_context,omitempty"`
	RepeatingTrack   bool                   `protobuf:"varint,3,opt,name=repeating_track,json=repeatingTrack,proto3" json:"repeating_track,omitempty"`
	PlaybackSpeed    *float32               `protobuf:"fixed32,4,opt,name=playback_speed,json=playbackSpeed,proto3,oneof" json:"playback_speed,omitempty"`
	Modes            map[string]string      `protobuf:"bytes,5,rep,name=modes,proto3" json:"modes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ContextPlayerOptionOverrides) Reset() {
	*x = ContextPlayerOptionOverrides{}
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextPlayerOptionOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextPlayerOptionOverrides) ProtoMessage() {}

func (x *ContextPlayerOptionOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextPlayerOptionOverrides.ProtoReflect.Descriptor instead.
func (*ContextPlayerOptionOverrides) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_transfer_proto_rawDescGZIP(), []int{6}
}

func (x *ContextPlayerOptionOverrides) GetShufflingContext() bool {
	if x != nil {
		return x.ShufflingContext
	}
	return false
}

func (x *ContextPlayerOptionOverrides) GetRepeatingContext() bool {
	if x != nil {
		return x.RepeatingContext
	}
	return false
}

func (x *ContextPlayerOptionOverrides) GetRepeatingTrack() bool {
	if x != nil {
		return x.RepeatingTrack
	}
	return false
}

func (x *ContextPlayerOptionOverrides) GetPlaybackSpeed() float32 {
	if x != nil && x.PlaybackSpeed != nil {
		return *x.PlaybackSpeed
	}
	return 0
}

func (x *ContextPlayerOptionOverrides) GetModes() map[string]string {
	if x != nil {
		return x.Modes
	}
	return nil
}

type Context struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Restrictions  *Restrictions          `protobuf:"bytes,4,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	Pages         []*ContextPage         `protobuf:"bytes,5,rep,name=pages,proto3" json:"pages,omitempty"`
	Loading       bool                   `protobuf:"varint,6,opt,name=loading,proto3" json:"loading,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Context) Reset() {
	*x = Context{}
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_transfer_proto_rawDescGZIP(), []int{7}
}

func (x *Context) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Context) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Context) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Context) GetRestrictions() *Restrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *Context) GetPages() []*ContextPage {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *Context) GetLoading() bool {
	if x != nil {
		return x.Loading
	}
	return false
}

type ContextPage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageUrl       string                 `protobuf:"bytes,1,opt,name=page_url,json=pageUrl,proto3" json:"page_url,omitempty"`
	NextPageUrl   string                 `protobuf:"bytes,2,opt,name=next_page_url,json=nextPageUrl,proto3" json:"next_page_url,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tracks        []*ContextTrack        `protobuf:"bytes,4,rep,name=tracks,proto3" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextPage) Reset() {
	*x = ContextPage{}
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextPage) ProtoMessage() {}

func (x *ContextPage) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_transfer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextPage.ProtoReflect.Descriptor instead.
func (*ContextPage) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_transfer_proto_rawDescGZIP(), []int{8}
}

func (x *ContextPage) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

func (x *ContextPage) GetNextPageUrl() string {
	if x != nil {
		return x.NextPageUrl
	}
	return ""
}

func (x *ContextPage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ContextPage) GetTracks() []*ContextTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

var File_spotify_connectstate_transfer_proto protoreflect.FileDescriptor

const file_spotify_connectstate_transfer_proto_rawDesc = "" +
	"\n" +
	"#spotify/connectstate/transfer.proto\x12\x14spotify.connectstate\x1a!spotify/connectstate/player.proto\"l\n" +
	"\x15InstrumentationParams\x12'\n" +
	"\x0finteraction_ids\x18\x06 \x03(\tR\x0einteractionIds\x12*\n" +
	"\x11page_instance_ids\x18\a \x03(\tR\x0fpageInstanceIds\"\xe9\x03\n" +
	"\bPlayback\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x127\n" +
	"\x18position_as_of_timestamp\x18\x02 \x01(\x05R\x15positionAsOfTimestamp\x12%\n" +
	"\x0eplayback_speed\x18\x03 \x01(\x01R\rplaybackSpeed\x12\x1b\n" +
	"\tis_paused\x18\x04 \x01(\bR\bisPaused\x12G\n" +
	"\rcurrent_track\x18\x05 \x01(\v2\".spotify.connectstate.ContextTrackR\fcurrentTrack\x12a\n" +
	"\x18associated_current_track\x18\x06 \x01(\v2\".spotify.connectstate.ContextTrackH\x00R\x16associatedCurrentTrack\x88\x01\x01\x12Q\n" +
	"#associated_position_as_of_timestamp\x18\a \x01(\x05H\x01R\x1fassociatedPositionAsOfTimestamp\x88\x01\x01B\x1b\n" +
	"\x19_associated_current_trackB&\n" +
	"$_associated_position_as_of_timestamp\"m\n" +
	"\x05Queue\x12:\n" +
	"\x06tracks\x18\x01 \x03(\v2\".spotify.connectstate.ContextTrackR\x06tracks\x12(\n" +
	"\x10is_playing_queue\x18\x02 \x01(\bR\x0eisPlayingQueue\"\x8f\x05\n" +
	"\aSession\x12A\n" +
	"\vplay_origin\x18\x01 \x01(\v2 .spotify.connectstate.PlayOriginR\n" +
	"playOrigin\x127\n" +
	"\acontext\x18\x02 \x01(\v2\x1d.spotify.connectstate.ContextR\acontext\x12\x1f\n" +
	"\vcurrent_uid\x18\x03 \x01(\tR\n" +
	"currentUid\x12]\n" +
	"\x10option_overrides\x18\x04 \x01(\v22.spotify.connectstate.ContextPlayerOptionOverridesR\x0foptionOverrides\x12F\n" +
	"\fsuppressions\x18\x05 \x01(\v2\".spotify.connectstate.SuppressionsR\fsuppressions\x12b\n" +
	"\x16instrumentation_params\x18\x06 \x01(\v2+.spotify.connectstate.InstrumentationParamsR\x15instrumentationParams\x12&\n" +
	"\fshuffle_seed\x18\a \x01(\tH\x00R\vshuffleSeed\x88\x01\x01\x12E\n" +
	"\fmain_context\x18\b \x01(\v2\x1d.spotify.connectstate.ContextH\x01R\vmainContext\x88\x01\x01\x123\n" +
	"\x13original_session_id\x18\t \x01(\tH\x02R\x11originalSessionId\x88\x01\x01B\x0f\n" +
	"\r_shuffle_seedB\x0f\n" +
	"\r_main_contextB\x16\n" +
	"\x14_original_session_id\"\x8c\x02\n" +
	"\rTransferState\x12D\n" +
	"\aoptions\x18\x01 \x01(\v2*.spotify.connectstate.ContextPlayerOptionsR\aoptions\x12:\n" +
	"\bplayback\x18\x02 \x01(\v2\x1e.spotify.connectstate.PlaybackR\bplayback\x12F\n" +
	"\x0fcurrent_session\x18\x03 \x01(\v2\x1d.spotify.connectstate.SessionR\x0ecurrentSession\x121\n" +
	"\x05queue\x18\x04 \x01(\v2\x1b.spotify.connectstate.QueueR\x05queue\"\xcf\x01\n" +
	"\fContextTrack\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\tR\x03uid\x12\x10\n" +
	"\x03gid\x18\x03 \x01(\fR\x03gid\x12L\n" +
	"\bmetadata\x18\x04 \x03(\v20.spotify.connectstate.ContextTrack.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xef\x02\n" +
	"\x1cContextPlayerOptionOverrides\x12+\n" +
	"\x11shuffling_context\x18\x01 \x01(\bR\x10shufflingContext\x12+\n" +
	"\x11repeating_context\x18\x02 \x01(\bR\x10repeatingContext\x12'\n" +
	"\x0frepeating_track\x18\x03 \x01(\bR\x0erepeatingTrack\x12*\n" +
	"\x0eplayback_speed\x18\x04 \x01(\x02H\x00R\rplaybackSpeed\x88\x01\x01\x12S\n" +
	"\x05modes\x18\x05 \x03(\v2=.spotify.connectstate.ContextPlayerOptionOverrides.ModesEntryR\x05modes\x1a8\n" +
	"\n" +
	"ModesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x11\n" +
	"\x0f_playback_speed\"\xce\x02\n" +
	"\aContext\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12G\n" +
	"\bmetadata\x18\x03 \x03(\v2+.spotify.connectstate.Context.MetadataEntryR\bmetadata\x12F\n" +
	"\frestrictions\x18\x04 \x01(\v2\".spotify.connectstate.RestrictionsR\frestrictions\x127\n" +
	"\x05pages\x18\x05 \x03(\v2!.spotify.connectstate.ContextPageR\x05pages\x12\x18\n" +
	"\aloading\x18\x06 \x01(\bR\aloading\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x98\x02\n" +
	"\vContextPage\x12\x19\n" +
	"\bpage_url\x18\x01 \x01(\tR\apageUrl\x12\"\n" +
	"\rnext_page_url\x18\x02 \x01(\tR\vnextPageUrl\x12K\n" +
	"\bmetadata\x18\x03 \x03(\v2/.spotify.connectstate.ContextPage.MetadataEntryR\bmetadata\x12:\n" +
	"\x06tracks\x18\x04 \x03(\v2\".spotify.connectstate.ContextTrackR\x06tracks\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x05\x10\x06B\xd8\x01\n" +
	"\x18com.spotify.connectstateB\rTransferProtoP\x01Z<github.com/devgianlu/go-librespot/proto/spotify/connectstate\xa2\x02\x03SCX\xaa\x02\x14Spotify.Connectstate\xca\x02\x14Spotify\\Connectstate\xe2\x02 Spotify\\Connectstate\\GPBMetadata\xea\x02\x15Spotify::Connectstateb\x06proto3"

var (
	file_spotify_connectstate_transfer_proto_rawDescOnce sync.Once
	file_spotify_connectstate_transfer_proto_rawDescData []byte
)

func file_spotify_connectstate_transfer_proto_rawDescGZIP() []byte {
	file_spotify_connectstate_transfer_proto_rawDescOnce.Do(func() {
		file_spotify_connectstate_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spotify_connectstate_transfer_proto_rawDesc), len(file_spotify_connectstate_transfer_proto_rawDesc)))
	})
	return file_spotify_connectstate_transfer_proto_rawDescData
}

var file_spotify_connectstate_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_spotify_connectstate_transfer_proto_goTypes = []any{
	(*InstrumentationParams)(nil),        // 0: spotify.connectstate.InstrumentationParams
	(*Playback)(nil),                     // 1: spotify.connectstate.Playback
	(*Queue)(nil),                        // 2: spotify.connectstate.Queue
	(*Session)(nil),                      // 3: spotify.connectstate.Session
	(*TransferState)(nil),                // 4: spotify.connectstate.TransferState
	(*ContextTrack)(nil),                 // 5: spotify.connectstate.ContextTrack
	(*ContextPlayerOptionOverrides)(nil), // 6: spotify.connectstate.ContextPlayerOptionOverrides
	(*Context)(nil),                      // 7: spotify.connectstate.Context
	(*ContextPage)(nil),                  // 8: spotify.connectstate.ContextPage
	nil,                                  // 9: spotify.connectstate.ContextTrack.MetadataEntry
	nil,                                  // 10: spotify.connectstate.ContextPlayerOptionOverrides.ModesEntry
	nil,                                  // 11: spotify.connectstate.Context.MetadataEntry
	nil,                                  // 12: spotify.connectstate.ContextPage.MetadataEntry
	(*PlayOrigin)(nil),                   // 13: spotify.connectstate.PlayOrigin
	(*Suppressions)(nil),                 // 14: spotify.connectstate.Suppressions
	(*ContextPlayerOptions)(nil),         // 15: spotify.connectstate.ContextPlayerOptions
	(*Restrictions)(nil),                 // 16: spotify.connectstate.Restrictions
}
var file_spotify_connectstate_transfer_proto_depIdxs = []int32{
	5,  // 0: spotify.connectstate.Playback.current_track:type_name -> spotify.connectstate.ContextTrack
	5,  // 1: spotify.connectstate.Playback.associated_current_track:type_name -> spotify.connectstate.ContextTrack
	5,  // 2: spotify.connectstate.Queue.tracks:type_name -> spotify.connectstate.ContextTrack
	13, // 3: spotify.connectstate.Session.play_origin:type_name -> spotify.connectstate.PlayOrigin
	7,  // 4: spotify.connectstate.Session.context:type_name -> spotify.connectstate.Context
	6,  // 5: spotify.connectstate.Session.option_overrides:type_name -> spotify.connectstate.ContextPlayerOptionOverrides
	14, // 6: spotify.connectstate.Session.suppressions:type_name -> spotify.connectstate.Suppressions
	0,  // 7: spotify.connectstate.Session.instrumentation_params:type_name -> spotify.connectstate.InstrumentationParams
	7,  // 8: spotify.connectstate.Session.main_context:type_name -> spotify.connectstate.Context
	15, // 9: spotify.connectstate.TransferState.options:type_name -> spotify.connectstate.ContextPlayerOptions
	1,  // 10: spotify.connectstate.TransferState.playback:type_name -> spotify.connectstate.Playback
	3,  // 11: spotify.connectstate.TransferState.current_session:type_name -> spotify.connectstate.Session
	2,  // 12: spotify.connectstate.TransferState.queue:type_name -> spotify.connectstate.Queue
	9,  // 13: spotify.connectstate.ContextTrack.metadata:type_name -> spotify.connectstate.ContextTrack.MetadataEntry
	10, // 14: spotify.connectstate.ContextPlayerOptionOverrides.modes:type_name -> spotify.connectstate.ContextPlayerOptionOverrides.ModesEntry
	11, // 15: spotify.connectstate.Context.metadata:type_name -> spotify.connectstate.Context.MetadataEntry
	16, // 16: spotify.connectstate.Context.restrictions:type_name -> spotify.connectstate.Restrictions
	8,  // 17: spotify.connectstate.Context.pages:type_name -> spotify.connectstate.ContextPage
	12, // 18: spotify.connectstate.ContextPage.metadata:type_name -> spotify.connectstate.ContextPage.MetadataEntry
	5,  // 19: spotify.connectstate.ContextPage.tracks:type_name -> spotify.connectstate.ContextTrack
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_spotify_connectstate_transfer_proto_init() }
func file_spotify_connectstate_transfer_proto_init() {
	if File_spotify_connectstate_transfer_proto != nil {
		return
	}
	file_spotify_connectstate_player_proto_init()
	file_spotify_connectstate_transfer_proto_msgTypes[1].OneofWrappers = []any{}
	file_spotify_connectstate_transfer_proto_msgTypes[3].OneofWrappers = []any{}
	file_spotify_connectstate_transfer_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spotify_connectstate_transfer_proto_rawDesc), len(file_spotify_connectstate_transfer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spotify_connectstate_transfer_proto_goTypes,
		DependencyIndexes: file_spotify_connectstate_transfer_proto_depIdxs,
		MessageInfos:      file_spotify_connectstate_transfer_proto_msgTypes,
	}.Build()
	File_spotify_connectstate_transfer_proto = out.File
	file_spotify_connectstate_transfer_proto_goTypes = nil
	file_spotify_connectstate_transfer_proto_depIdxs = nil
}
